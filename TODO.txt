Bugs
1) DefaultLockManager: proper downscope and downgrade of locks (consider owners of nested locks)  
2) AutoCloseableLock: new autocloseable lock objects shall be initialized with the actual state of the lock path 
3) AutoCloseableLock: shall always block on all operations if necessary. Otherwise, try-with-resources lock blocks will be entered illegally.
3a) DefaultLockManager: must provide blocking versions of all lock operations.
3b) AutoCloseableLock must use the new blocking versions of all lock operations.

Missing key features
* Zuul (REST controller): upgrade / downgrade
* Zuul (REST controller): upscope / downscope
* Zuul (REST controller): info method shall allow to query only for one particular node w/o subtree
* Zuul (REST controller): it shall be possible to list the children of a lock (think file systems)
* Zuul (REST controller): info method shall interpret a lock path and return only a subtree of locks
* Zuul (REST controller): info method shall return a tree of lock infos
* REST client: integration test with existing LockManager test suite
* REST client: integration test with existing AutoCloseableLockManager test suite

Nice to have
* DefaultLockManager: provide non-blocking (timeout) versions of all lock operations
* add HATEOAS

Unprioritized:

locks as inodes?
--> FS?
intention locks

* PUT /a/b/c?session-id # locks /a/b/c for the given session
* PUT /?session-id&scope=deep # deep locks the whole tree
* GET /a/b/c returns the lock info for /a/b/c or File not found
* GET /a/b/c?scope=deep returns all locks below /a/b/c as a tree rooted at /a/b/c (? including the prefix in each path
* GET /a/b/c?session-id&scope=deep # returns all locks below /a/b/c owned by the given session
* DEL /a/b?scope=deep?session-id # releases all locks held by session-id below /a/b

lock type (upgrade)
lock scope (upgrade)

LockInfo, relation to inode?
  path
  scope
  type
  count
  session

* mvn jetty:run listens on 8080 although 8090 is configured 
* (client) library with AutoCloseable locks hiding the service
* write more concurrent tests (and debug concurrent test framework)
* use proper intention locks to enable correct assertions
* self test with more assertions

* replicate with Paxos
* test distributed Zuul with AutoCloseable lock manager tests
* let nodes communicate in a binary format with each other (binary client and server interfaces)
* compress communication between nodes by computing huffman codes for common prefixes

